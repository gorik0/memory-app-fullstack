// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ImageRepository is an autogenerated mock type for the ImageRepository type
type ImageRepository struct {
	mock.Mock
}

// DeleteProfile provides a mock function with given fields: ctx, objName
func (_m *ImageRepository) DeleteProfile(ctx context.Context, objName string) error {
	ret := _m.Called(ctx, objName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, objName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: ctx, objName, imageFile
func (_m *ImageRepository) UpdateProfile(ctx context.Context, objName string, imageFile multipart.File) (string, error) {
	ret := _m.Called(ctx, objName, imageFile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, multipart.File) (string, error)); ok {
		return rf(ctx, objName, imageFile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, multipart.File) string); ok {
		r0 = rf(ctx, objName, imageFile)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, multipart.File) error); ok {
		r1 = rf(ctx, objName, imageFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageRepository creates a new instance of ImageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageRepository {
	mock := &ImageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
