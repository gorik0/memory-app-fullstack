// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "memory-app/account/models"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	uuid "github.com/google/uuid"
)

// UserServiceI is an autogenerated mock type for the UserServiceI type
type UserServiceI struct {
	mock.Mock
}

// ClearProfileImage provides a mock function with given fields: ctx, uid
func (_m *UserServiceI) ClearProfileImage(ctx context.Context, uid uuid.UUID) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for ClearProfileImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0, uid
func (_m *UserServiceI) Get(_a0 context.Context, uid uuid.UUID) (*models.User, error) {
	ret := _m.Called(_a0, uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.User, error)); ok {
		return rf(_a0, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = rf(_a0, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetProfileImage provides a mock function with given fields: ctx, uid, imageFileHeader
func (_m *UserServiceI) SetProfileImage(ctx context.Context, uid uuid.UUID, imageFileHeader *multipart.FileHeader) (*models.User, error) {
	ret := _m.Called(ctx, uid, imageFileHeader)

	if len(ret) == 0 {
		panic("no return value specified for SetProfileImage")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *multipart.FileHeader) (*models.User, error)); ok {
		return rf(ctx, uid, imageFileHeader)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *multipart.FileHeader) *models.User); ok {
		r0 = rf(ctx, uid, imageFileHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, uid, imageFileHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signin provides a mock function with given fields: _a0, _a1
func (_m *UserServiceI) Signin(_a0 context.Context, _a1 *models.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Signin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signup provides a mock function with given fields: _a0, _a1
func (_m *UserServiceI) Signup(_a0 context.Context, _a1 *models.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDetail provides a mock function with given fields: ctx, u
func (_m *UserServiceI) UpdateDetail(ctx context.Context, u *models.User) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserServiceI creates a new instance of UserServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceI {
	mock := &UserServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
