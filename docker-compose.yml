version: "3.8"
services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  account:
    build:
      context: ./account
      target: builder
    image: account
    env_file: .env

    ports:
      - "9001:9000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account.rule=Host(`account.localhost`) && PathPrefix(`/api/account`)"
    environment:
      - ENV=dev
    depends_on:
    - postgres-account
    volumes:
      - ./account:/go/src/app
    # have to use $$ (double-dollar) so docker doesn't try to substitute a variable
    command: reflex -r "\.go$$" -s -- sh -c "go run ./"
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - "redisdata:/data"
  postgres-account:
    image: "postgres:alpine"
    environment:
        - POSTGRES_PASSWORD=123
        - POSTGRES_USER=gorik

    ports:
      - "5431:5432"
    #   Set a volume for data and initial sql script
    #   May configure initial db for future demo
    volumes:
      - "./db:/var/lib/postgresql/data"
      # - ./init:/docker-entrypoint-initdb.d/
    command: ["postgres", "-c", "log_statement=all"]
  account-client:
      build:
        context: ./account-client
      image: account-client # if we don't give image name, traefik won't create router ü§∑‚Äç‚ôÇÔ∏è

      ports:
        - "5173:5173"
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.account-client.rule=Host(`account.localhost`) && PathPrefix(`/account`)"

      volumes:
        - ./account-client:/app
        - /app/node_modules #avoid overwriting node_modules
      depends_on:
        - reverse-proxy

volumes:
    pgdata_account:
    redisdata:
